<script>

    /*
     * Functionality for downloading the sample's information.
     * Adds all the data into an array with formatting that can be read by a csv document and
     * downloads it.
     *
     */
    // Add mlst table
    // Add annotations table

    function downloadInfo() {
    console.log("download sample information");

    let sampleIdentity = <%- JSON.stringify(sample_ID) %>;
    //let tag_tag = <%- /* JSON.stringify(tag_tag) */ %>;
    let sample_metadata = <%- JSON.stringify(metadata) %>;
    let user_metadata = <%- JSON.stringify(userMeta) %>;
    let sequence_summary = <%- JSON.stringify(sequence_summary) %>;
    let assembly_summary = <%- JSON.stringify(result_assembly_summary) %>;
    let mlst_mlst = <%- JSON.stringify(mlst) %>;
    let allObjects = [];

    try {

        var arr = [];
        arr.push("\r\n\rMETADATA");
        arr.push("\rSample");
        arr.push(sample_metadata.sample);
        //runtype
        arr.push("\rRun Type");
        arr.push(sample_metadata.runtype);
        // original runtype
        arr.push("\rOriginal Run Type");
        arr.push(sample_metadata.original_runtype);
        // is paired
        arr.push("\rIs Paired");
        arr.push(sample_metadata.is_paired);
        // is compressed
        arr.push("\rIs Compressed");
        arr.push(sample_metadata.is_compressed);
        arr.push("\rSpecies");
        arr.push(sample_metadata.species);
        // genome size
        arr.push("\rGenome Size");
        arr.push(sample_metadata.genome_size);
        arr.push("\rHost");
        arr.push(user_metadata.isolation_host);
        arr.push("\rSource");
        arr.push(user_metadata.isolation_source);
        arr.push("\rLocation");
        arr.push(user_metadata.isolation_location);
        arr.push("\rTime");
        arr.push(user_metadata.time_of_sampling);
        arr.push("\rNotes");
        arr.push(user_metadata.notes);
        
        arr.push("\r\n\rSEQUENCING METRICS");
        arr.push("\rName");
        arr.push("Total BP");
        arr.push("Coverage");
        arr.push("Read Total");
        arr.push("Read min");
        arr.push("Read mean");
        arr.push("Read std");
        arr.push("Read median");
        arr.push("Read max");
        arr.push("Read 25th");
        arr.push("Read 75th");
        arr.push("Quality mean");
        arr.push("Quality std");
        arr.push("Quality median");
        arr.push("Quality 25th");
        arr.push("Quality 75th");

        allObjects.push(arr)
      //});
    }
    catch(err) {
      allObjects.push("\rError downloading sample metadata section");
    }
    console.log(sequence_summary);
    sequence_summary.forEach(function(object){
    var arr = [];
    arr.push(object.name);
    arr.push(object.total_bp);
    arr.push(object.coverage);
    arr.push(object.read_total);
    arr.push(object.read_min);
    arr.push(object.read_mean);
    arr.push(object.read_std);
    arr.push(object.read_median);
    arr.push(object.read_max);
    arr.push(object.read_25th);
    arr.push(object.read_75th);
    arr.push(object.qual_mean);
    arr.push(object.qual_std);
    arr.push(object.qual_median);
    arr.push(object.qual_25th);
    arr.push(object.qual_75th);
    allObjects.push(arr)
    });

    //assembly_summary.forEach(function(object){
    var arr = [];
    arr.push("\r\n\rASSEMBLY METRICS");
    arr.push("\rTotal Contig:");
    arr.push(assembly_summary.total_contig);
    arr.push("\rTotal Contig Length:");
    arr.push(assembly_summary.total_contig_length);
    arr.push("\rMin Contig Length:");
    arr.push(assembly_summary.min_contig_length);
    arr.push("\rMedian Contig Length:");
    arr.push(assembly_summary.median_contig_length);
    arr.push("\rMean Contig Length:");
    arr.push(assembly_summary.mean_contig_length);
    arr.push("\rMax Contig Length:");
    arr.push(assembly_summary.max_contig_length);
    arr.push("\rn50 Contig Length:");
    arr.push(assembly_summary.n50_contig_length);
    arr.push("\rl50 Contig Count:");
    arr.push(assembly_summary.l50_contig_count);
    arr.push("\rng50 Contig Length:");
    arr.push(assembly_summary.ng50_contig_length);
    arr.push("\rlg50 Contig Count:");
    arr.push(assembly_summary.lg50_contig_count);
    arr.push("\rContigs > 1k:");
    arr.push(assembly_summary.contigs_greater_1k);
    arr.push("\rContigs > 10k:");
    arr.push(assembly_summary.contigs_greater_10k);
    arr.push("\rContigs > 100k:");
    arr.push(assembly_summary.contigs_greater_100k);
    arr.push("\rContigs > 1m");
    arr.push(assembly_summary.contigs_greater_1m);
    arr.push("\rPercentage of Contigs > 1k:");
    arr.push(assembly_summary.percent_contigs_greater_1k);
    arr.push("\rPercentage of Contigs > 10k:");
    arr.push(assembly_summary.percent_contigs_greater_10k);
    arr.push("\rPercentage of Contigs > 100k:");
    arr.push(assembly_summary.percent_contigs_greater_100k);
    arr.push("\rPercentage of Contigs > 1m:");
    arr.push(assembly_summary.percent_contigs_greater_1m);
    arr.push("\rContigs Percentage of A:");
    arr.push(assembly_summary.contig_percent_a);
    arr.push("\rContigs Percentage of T:");
    arr.push(assembly_summary.contig_percent_t);
    arr.push("\rContigs Percentage of G:");
    arr.push(assembly_summary.contig_percent_g);
    arr.push("\rContigs Percentage of C:");
    arr.push(assembly_summary.contig_percent_c);
    arr.push("\rContigs Percentage of N:");
    arr.push(assembly_summary.contig_percent_n);
    arr.push("\rContigs not ACGTN:");
    arr.push(assembly_summary.contig_non_acgtn);
    allObjects.push(arr)
    //});

    console.log(mlst_mlst)
    /* There data seems a lot different
    mlst_mlst.forEach(function(object){
    var arr = [];
    arr.push("\r\n\rMLST");
    arr.push("\rst:");
    arr.push(object.st);
    arr.push("\rariba:");
    arr.push(object.ariba);
    arr.push("\rmentalist:");
    arr.push(object.mentalist);
    arr.push("\rblast:");
    arr.push(object.blast);
    allObjects.push(arr)
    }); */

    /*
    for(let i = 0; i < 1 ; i++){
    var arr = [];
    arr.push("\r\n\rSCCMEC PRIMER HITS");
    arr.push("\rTitle");
    arr.push("Contig");
    arr.push("Hamming Distance");
    arr.push("Bitscore");
    arr.push("Evalue");
    arr.push("Identity");
    arr.push("Mismatch");
    arr.push("Gaps");
    arr.push("Query From");
    arr.push("Query To");
    arr.push("Hit From");
    arr.push("Hit To");
    arr.push("Align Length");
    arr.push("Qseq");
    arr.push("Hseq");
    allObjects.push(arr)
    }

    sccmec_primers.forEach(function(object){
    var arr = [];
    arr.push("\r" + staphopia_blatstquery[object.query_id-1].title);
    arr.push(object.contig);
    arr.push(object.hamming_distance);
    arr.push(object.bitscore);
    arr.push(object.evalue);
    arr.push(object.identity);
    arr.push(object.mismatch);
    arr.push(object.gaps);
    arr.push(object.query_from);
    arr.push(object.query_to);
    arr.push(object.hit_from);
    arr.push(object.hit_to);
    arr.push(object.align_len);
    arr.push(object.qseq);
    arr.push(object.hseq);
    allObjects.push(arr)
    });

    for(let i = 0; i < 1 ; i++){
    var arr = [];
    arr.push("\r\n\rSCCMEC SUBTYPE HITS");
    arr.push("\rTitle");
    arr.push("Contig");
    arr.push("Hamming Distance");
    arr.push("Bitscore");
    arr.push("Evalue");
    arr.push("Identity");
    arr.push("Mismatch");
    arr.push("Gaps");
    arr.push("Query From");
    arr.push("Query To");
    arr.push("Hit From");
    arr.push("Hit To");
    arr.push("Align Length");
    arr.push("Qseq");
    arr.push("Hseq");
    allObjects.push(arr)
    }

    sccmec_subtypes.forEach(function(object){
    var arr = [];
    arr.push("\r" + staphopia_blatstquery[object.query_id-1].title);
    arr.push(object.contig);
    arr.push(object.hamming_distance);
    arr.push(object.bitscore);
    arr.push(object.evalue);
    arr.push(object.identity);
    arr.push(object.mismatch);
    arr.push(object.gaps);
    arr.push(object.query_from);
    arr.push(object.query_to);
    arr.push(object.hit_from);
    arr.push(object.hit_to);
    arr.push(object.align_len);
    arr.push(object.qseq);
    arr.push(object.hseq);
    allObjects.push(arr)
    });

    for(let i = 0; i < 1 ; i++){
    var arr = [];
    arr.push("\r\n\rSCCMEC SUBTYPE HITS");
    arr.push("\rTitle");
    arr.push("Contig");
    arr.push("Hamming Distance");
    arr.push("Bitscore");
    arr.push("Evalue");
    arr.push("Identity");
    arr.push("Mismatch");
    arr.push("Gaps");
    arr.push("Query From");
    arr.push("Query To");
    arr.push("Hit From");
    arr.push("Hit To");
    arr.push("Align Length");
    arr.push("Qseq");
    arr.push("Hseq");
    arr.push("Midline");
    allObjects.push(arr)
    }

    sccmec_proteins.forEach(function(object){
    var arr = [];
    arr.push("\r" + staphopia_blatstquery[object.query_id-1].title);
    arr.push(object.contig);
    arr.push(object.hamming_distance);
    arr.push(object.bitscore);
    arr.push(object.evalue);
    arr.push(object.identity);
    arr.push(object.mismatch);
    arr.push(object.gaps);
    arr.push(object.query_from);
    arr.push(object.query_to);
    arr.push(object.hit_from);
    arr.push(object.hit_to);
    arr.push(object.align_len);
    arr.push(object.qseq);
    arr.push(object.hseq);
    arr.push(object.midline);
    allObjects.push(arr)
    });
    */
    //var BOM = "\uFEFF";
    //var csvData = BOM + allObjects;
    //var blob = new Blob([csvData], { type: "text/csv;charset=utf-8" });
    // TODO: Cleanup format of information, weird newlines
    console.log(allObjects);
    let csvContent = "data:text/csv;charset=utf-8," + allObjects.map(e => e.join(",")).join("\n");
    saveCsvAs(csvContent, "BactBook-Sample:"+ sampleIdentity +"-info.csv");
    }

    function saveCsvAs(csvContent, fileName){
      let encodedUri = encodeURI(csvContent);
      let link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", `BactBook-Sample ${<%- JSON.stringify(sample_ID) %>} Metadata.csv`);
      document.body.appendChild(link); // Required for FF
      link.click();
    }
</script>
