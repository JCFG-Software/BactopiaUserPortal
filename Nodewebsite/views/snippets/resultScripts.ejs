<!-- Result Page Scripts -->
<script>

    /*
     * Changes the sample information displayed based on the user selection
     *
     */

    function resultsTabs(evt, tabName) {

        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");


        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    /*
     * The cytoscape.js functionality
     * Sets up the cytoscape element at the bottom of the sample information page
     * and creates all the nodes and edges for the different related samples.
     * Adds created nodes into a 'collection' that can be iterated over in future functions
     * when changing the cytoscape elements displayed.
     * Filters the nodes that are initially displayed by the default values of the sliders.
     * Sets up the popups which will appear when the user clicks on one of the nodes.
     *
     */
    var sampleIdentity = <%- JSON.stringify(sample_ID) %>;
    console.log("HELP");
    console.log(sampleIdentity);

    var cy = cytoscape({
        container: document.getElementById('cy'),
        elements: [
            // nodes
            { data: { id: sampleIdentity }, style: {'background-color': 'grey'} }
        ],
        style: [{
            selector: 'node', style: {'background-color': '#468e94', label: 'data(id)'},
        }, {
            selector: 'edge', style: {'curve-style': 'bezier', 'control-point-step-size': 10}
        }
        ],
    });

    // Create an empty collection for all the cytoscape elements to be iterated over
    let collection = cy.collection();

    // Convert data from backend to a form that javascript can use
    let same_sq = <%- JSON.stringify(same_sequences) %>;
    let same_loc = <%- JSON.stringify(same_locations) %>;
    let same_ho = <%- JSON.stringify(same_hosts) %>;
    let same_iso = <%- JSON.stringify(same_isolations) %>;
    let weighted_dist = <%- JSON.stringify(weighted_distance) %>;

    // Add nodes for samples with the same sequence type and connect them
    // Iterate through the SQL results
    same_sq.forEach(function(same_sequence) {
        let same_sequence_sample_id = same_sequence.sample_id;
        if (same_sequence_sample_id != sampleIdentity){

            weighted_dist.forEach(function (weighted_distance_list) {
                if (weighted_distance_list.comparison_sample == same_sequence.name) {

                    // Create nodes and assign each node summary information
                    cy.add({
                        data: {
                            id: same_sequence_sample_id,
                            seq: same_sequence.st,
                            loc: same_sequence.country,
                            strain: same_sequence.strain,
                            host: same_sequence.host,
                            iso: same_sequence.isolation_source,
                            dist: weighted_distance_list.distance
                        }
                    });
                }
            });

            // Add nodes to the collection
            collection = collection.add(cy.$id(same_sequence_sample_id));
            var source = same_sequence_sample_id;

            // Create edges between nodes
            cy.add({
                data: {
                    id: 'edge' + source,
                    source: source,
                    target: (sampleIdentity),
                },
                style: {'line-color': 'green'}
            });
            // Add edges to the connections
            collection = collection.add(cy.$id('edge' + same_sequence_sample_id));
        }
    });

    // Add nodes for samples with the same location and connect them
    // Iterate through the SQL results
    same_loc.forEach(function(same_location) {
        let same_location_sample_id = same_location.sample_id;
        if (same_location_sample_id != sampleIdentity){
            if(cy.$id(same_location_sample_id).empty()){
                weighted_dist.forEach(function (weighted_distance_list) {
                    if (weighted_distance_list.comparison_sample == same_location.name) {

                        // Create nodes and assign each node summary information
                        cy.add({
                            data: {id: same_location_sample_id, seq: same_location.st, loc: same_location.country, strain: same_location.strain,
                                host: same_location.host, iso: same_location.isolation_source, dist: weighted_distance_list.distance}
                        });
                        // Add nodes to the collection
                        collection = collection.add(cy.$id(same_location_sample_id));
                    }
                });
            }
            var source = same_location_sample_id;

            // Create edges between nodes
            cy.add({
                data: {
                    id: 'edge2' + source,
                    source: source,
                    target: (sampleIdentity),
                },
                style: {'line-color': 'red'}
            });
            // Add edges to the connections
            collection = collection.add(cy.$id('edge2' + same_location_sample_id));
        }
    });

    // Add nodes for samples with the same host and connect them
    // Iterate through the SQL results
    same_ho.forEach(function(same_host) {
        let same_host_sample_id = same_host.sample_id;
        if (same_host_sample_id != sampleIdentity){
            if(cy.$id(same_host_sample_id).empty()){
                weighted_dist.forEach(function (weighted_distance_list) {
                    if (weighted_distance_list.comparison_sample == same_host.name) {

                        // Create nodes and assign each node summary information
                        cy.add({
                            data: {id: same_host_sample_id, seq: same_host.st, loc: same_host.country, strain: same_host.strain,
                                host: same_host.host, iso: same_host.isolation_source, dist: weighted_distance_list.distance}
                        });
                        // Add nodes to the collection
                        collection = collection.add(cy.$id(same_host_sample_id));
                    }
                });
            }
            var source = same_host_sample_id;

            // Create edges between nodes
            cy.add({
                data: {
                    id: 'edge3' + source,
                    source: source,
                    target: (sampleIdentity),
                },
                style: {'line-color': 'blue'}
            });
            // Add edges to the connections
            collection = collection.add(cy.$id('edge3' + same_host_sample_id));
        }
    });

    // Add nodes for samples with the same isolation source and connect them
    // Iterate through the SQL results
    same_iso.forEach(function(same_isolation) {
        let same_iso_sample_id = same_isolation.sample_id;
        if (same_iso_sample_id != sampleIdentity){
            if(cy.$id(same_iso_sample_id).empty()){
                weighted_dist.forEach(function (weighted_distance_list) {
                    if (weighted_distance_list.comparison_sample == same_isolation.name) {

                        // Create nodes and assign each node summary information
                        cy.add({
                            data: {id: same_iso_sample_id, seq: same_isolation.st, loc: same_isolation.country, strain: same_isolation.strain,
                                host: same_isolation.host, iso: same_isolation.isolation_source, dist: weighted_distance_list.distance}
                        });
                        // Add nodes to the collection
                        collection = collection.add(cy.$id(same_iso_sample_id));
                    }
                });
            }
            var source = same_iso_sample_id;

            // Create edges between nodes
            cy.add({
                data: {
                    id: 'edge4' + source,
                    source: source,
                    target: (sampleIdentity),
                },
                style: {'line-color': 'orange'}
            });
            // Add edges to the connections
            collection = collection.add(cy.$id('edge4' + same_iso_sample_id));
        }
    });

    // Set up the initial display for the user by limiting the minimum connections to 2 and maximum weighted distance to 0.015
    // Go through all of the elements in the collection
    collection.forEach(function(ele, i ,eles) {
        // Check if the element is a node
        if(ele.isNode()){
            let e = ele.connectedEdges();
            // Check if the node has less than 2 connected edges and remove if true
            if(e.length < 2){
                ele.remove();
            }
            // Check if the node's sample has a weighted distance greater than 0.015 and remove if true
            if (ele.data('dist') > 0.015){
                ele.remove();
            }

            // Set up links for all nodes to their respective sample results page
            ele.on('click', function(evt){
                let id = this.id();
                function get_sample(){
                    let form = document.createElement("form");
                    let element = document.createElement("input");
                    form.action = '/result';
                    form.method = "get";
                    element.name ="sampleSelection";
                    element.value= id;
                    form.appendChild(element);
                    document.body.appendChild(form);
                    form.submit();
                }

                // Set up popup boxes for each node
                popupS.confirm({
                    content: '<b>Sample: </b>' + id +'<br><b>Sequence Type: </b>' + ele.data('seq') +'<br><b>Location: </b>' + ele.data('loc') +
                    '<br><b>Strain: </b>' + ele.data('strain') +'<br><b>Host: </b>' + ele.data('host') +'<br><b>Isolation Source: </b>' + ele.data('iso') +
                    '<br><b>Weighted Distance: </b>' + ele.data('dist'),
                    labelOk: 'View',
                    labelCancel: 'Cancel',
                    additionalButtonCancelClass: 'popUpButtonCSS',
                    additionalButtonOkClass: 'popUpButtonCSS',
                    onSubmit: function() {
                        get_sample();
                    }
                });
            });

        }
    });

    // Run cola plugin to display the nodes in an aesthetic way and make it movey and groovy
    cy.layout({
        name: 'cola'
    }).run()


    /*
     * Updates the cytoscape element based on the values of the sliders when a user moves one.
     * Iterates through the collection of elements and display the nodes which match the specification defined by the user and
     * change the number displayed above the slider to accurately represent the nodes being shown.
     *
     */

    // Change the nodes based on the slider values defined by the user
    function changeDist(){
        let num = document.getElementById("myRange1").value;
        let changed_dist = document.getElementById("myRange2").value;
        let dist = changed_dist/10000;
        collection.restore();
        collection.forEach(function(ele, i ,eles) {
            if(ele.isNode()) {
                let e = ele.connectedEdges();
                if (e.length < num) {
                    ele.remove();
                }
                if (ele.data('dist') > dist){
                    ele.remove();
                }
            }
        });
        // Change display above sliders to display new value
        document.getElementById("weighteddistnum").innerHTML = "Minimum Connections = "+ num;
        document.getElementById("weighteddist2num").innerHTML = "Maximum Weighted Distance = "+ dist;
        cy.layout({
            name: 'cola'
        }).run()
    }


    /*
     * SCRIPTS FOR CYTOSCAPE GRAPH BUTTONS
     * Functionality for zooming in and out of the cytoscape graph/element,
     * downloading a picture of the graph, expand and minimise the graph, and
     * for centering the nodes in the element
     *
     */

    <!-- Global variables for cytoscape graph buttons -->
    var zoomAmount = 1;
    var newZoom;


    <!-- zoomInGraph functionality-->
    function zoomInGraph() {
        console.log("ZOOM IN - "+zoomAmount);
        zoomAmount = zoomAmount + 0.25;
        newZoom = zoomAmount;
        console.log("IN - "+newZoom);

        cy.zoom({level: newZoom});

    }

    <!-- zoomOutGraph functionality-->
    function zoomOutGraph() {
        console.log("ZOOM OUT - "+zoomAmount);

        zoomAmount = zoomAmount - 0.25;
        newZoom = zoomAmount;
        console.log("OUT - "+newZoom);

        cy.zoom({level: newZoom});

    }

    /*
     * Downloads an image of the current state of the cytoscape element
     */
    function downloadGraph() {
        console.log("download graph");


        var png64 = cy.png();
        saveAs(png64, "StaphBook-Graph.png");


    }

    <!-- expandGraph functionality-->
    function expandGraph() {
        var windowHeight = window.innerHeight;
        var graphHeight = windowHeight - 175;

        document.getElementById("resultsPageGraphComponent3").style.height= graphHeight + "px";

        <!-- specifically modify cytoscape graph -->
        document.getElementById("cy").style.height= graphHeight + "px";

        centerGraph();

    }

    <!-- center graph functionality-->
    function centerGraph() {
        zoomAmount = 1;
        newZoom = 1;

        cy.center();
        cy.reset();

    }
    <!-- minimize graph functionality -->
    function minimizeGraph() {
        document.getElementById("resultsPageGraphComponent3").style.height= 400 + "px";

        <!-- specifically modify cytoscape graph -->
        document.getElementById("cy").style.height= 400 + "px";

        cy.center();
        cy.reset();
    }

    /*
     * Script for Find my Friends functionality
     * Functionality for selecting min and max genetic distance
     * and displaying genome information on cards
     */

     // Global variables for slider selection
     var maxPercentage = 100;
     var stepValue = 0.00000001;

     // Updates slider and description for selected minimum genetic distance
     function updateMinSliderSelection() {
        let minSlider = document.getElementById("minGeneticDistInput");
        let maxSlider = document.getElementById("maxGeneticDistInput");

        minSlider.value = Math.min(minSlider.value, maxSlider.value - (stepValue));
        let value = (100/(parseFloat(minSlider.max)-parseFloat(minSlider.min)))*parseFloat(minSlider.value)-(100/(parseFloat(minSlider.max)-parseFloat(minSlider.min)))*parseFloat(minSlider.min);

        document.getElementById("leftSlider").style.width = value + "%";
        document.getElementById("selectedSlider").style.left = value + "%";
        document.getElementById("leftGeneticDistThumb").style.left = value + "%";
        document.getElementById("minGeneticDist").innerHTML = minSlider.value;

        clearFindMyFriendsSection();
        displayFindMyFriendsSection();
     }

     // Updates slider and descripton for selected maximum genetic distance
     function updateMaxSliderSelection() {
        let minSlider = document.getElementById("minGeneticDistInput");
        let maxSlider = document.getElementById("maxGeneticDistInput");

        maxSlider.value = Math.max(maxSlider.value, minSlider.value + stepValue);
        var value = (100/(parseFloat(maxSlider.max)-parseFloat(maxSlider.min)))*parseFloat(maxSlider.value)-(100/(parseFloat(maxSlider.max)-parseFloat(maxSlider.min)))*parseFloat(maxSlider.min);

        document.getElementById("rightSlider").style.width = (maxPercentage - value) + "%";
        document.getElementById("selectedSlider").style.right = (maxPercentage - value) + "%";
        document.getElementById("rightGeneticDistThumb").style.left = value + "%";
        document.getElementById("maxGeneticDist").innerHTML = maxSlider.value;

        clearFindMyFriendsSection();
        displayFindMyFriendsSection();
     }

     function clearFindMyFriendsSection() {
        document.getElementById("findMyFriendsCards").innerHTML = "";
     }

     function displayFindMyFriendsSection(){
       let minValue = document.getElementById("minGeneticDistInput").value;
       let maxValue = document.getElementById("maxGeneticDistInput").value;
       let relatedSamples =  <%- JSON.stringify(all_weighted_distances) %>;
       let desiredRelatedSamples = [];

       relatedSamples.forEach(function(sample) {
         if (sample.distance >= minValue && sample.distance <= maxValue) {
           desiredRelatedSamples.push(sample);
         }
       });

       console.log(desiredRelatedSamples);

       let parentSection = document.getElementById("findMyFriendsCards");
       let count = 0
       desiredRelatedSamples.forEach(function(relatedSample) {
         //parentSection.innerHTML = parentSection.innerHTML + createGenomeCard(relatedSample).outerHTML;
         genomeCard = createGenomeCard(relatedSample);
         parentSection.appendChild(genomeCard);

         tag = parentSection.getElementsByClassName("geneticDistanceTag")[count];
         card = parentSection.getElementsByClassName("genomeCard")[count];
         console.log(`top: ${ - 1 * (tag.offsetTop - card.offsetTop) - 0.5 * tag.clientHeight }px; left: ${ 0.5 * card.clientWidth }px;`)
         tag.setAttribute("style", `top: ${ - 1 * (tag.offsetTop - card.offsetTop) - 0.5 * tag.clientHeight }px; left: ${ 0.6 * card.clientWidth }px;`);
         count++;
       });


     }


     function createGenomeCard(sample){
       let newCard = document.createElement("button");
       newCard.setAttribute("class", "genomeCard");
       newCard.setAttribute("name", "sampleSelection");
       newCard.setAttribute("value", `${sample.id}`);
       newCard.setAttribute("onclick", "window.location.href='/result'");
       newCard.setAttribute("type", "submit");

       let info = document.createElement("p");

       let display = `<div class="genomeCardSampleId"><h4>${sample.id}</h4></div>
       <b>Sequence Type: </b>${sample.st}<br>
       <b>Location: </b>${sample.country}<br>
       <b>Strain: </b>${sample.strain}<br>
       <b>Host: </b>${sample.host}<br>
       <b>Isolation Source: </b>${sample.isolation_source}<br>
       <div class="geneticDistanceTag">${sample.distance}</div>`;

       info.innerHTML = display;
       newCard.innerHTML = info.outerHTML;

       return newCard;
     }

</script>
