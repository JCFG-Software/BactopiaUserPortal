<!-- Result Page Scripts -->
<script>

    sampleIdentity = "<%- sample_ID %>";

    /*
     * Search through the annotations
     */
    function searchAnnotations(){
        console.log("searching for annotations");
        const query = document.getElementById("searchAnnotations").value.toLowerCase();
        const table = document.getElementById("annotationsTableBody");
        const rows = table.getElementsByTagName("tr");
        console.log(`query: ${query}, number of rows: ${rows.length}`);
        let results = 0;
        for (let i = 0; i < rows.length; i++) {
                const txtValue = rows[i].textContent || rows[i].innerText;
                if (txtValue.toLowerCase().indexOf(query) > -1) {
                    rows[i].style.display = "";
                    results++;
                } else {
                    rows[i].style.display = "none";
                }
            }
        document.getElementById("searchAnnotationsResults").innerHTML = `${results} Results`;

        }


    /*
     * Changes the sample information displayed based on the user selection
     *
     */

    function resultsTabs(evt, tabName) {

        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");


        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }


    function addSamplesToGroup(group_id){
        collection.forEach((ele) => {
            if(ele.isNode() && ele.inside()){
                addSampleToGroup(group_id, ele.id());
            }
        });
        addSampleToGroup(group_id, sampleIdentity);
    }

    function addToGroup(group_id){
        addSampleToGroup(group_id, sampleIdentity);
    }

    function addSampleToGroup(group_id, sample_id){
        //let group_id = document.getElementById('groups-list').value;
        let baseUrl = window.location.origin;
        let url = `${baseUrl}/addGroupSample`;

        if(group_id === 'create'){
            window.location.href = `${baseUrl}/createGroup`;
            return;
        }

        fetch(url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                groupId: group_id,
                sampleId: sample_id,
            })
        })
            .then(response => {
                if (response.status === 200 && sample_id === sampleIdentity) {
                    location.reload(true);
                }
            })
            .catch(error => {
                alert("Something went wrong");
                console.log(error);
            });
    }

    function remGroup(group_id){
        let baseUrl = window.location.origin;//"http://127.0.0.1:8000"; // TODO: update when hosted
        let url = `${baseUrl}/removeGroupSample`;
        fetch(url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                groupId: group_id,
                sampleId: "<%- sample_ID %>",
            })
        })
            .then(response => {
                if (response.status == 200) {
                    location.reload(true);
                }
            })
            .catch(error => {
                console.log(error);
            });
    }



    // Display cards when first loaded

      let coll = document.getElementsByClassName("collapsible"); // TODO: CLEANUp

      // Set heights of genome information blocks
      for (i = 0; i < coll.length; i++) {
        let sectionContent = coll[i].nextElementSibling;
        sectionContent.classList.toggle("contentActive");
        let contentHeight = sectionContent.getBoundingClientRect().height;
        sectionContent.style.setProperty('--max-height', contentHeight + 'px');
        sectionContent.classList.toggle("contentActive");
      }

      for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
          this.classList.toggle("sectionActive");
          let content = this.nextElementSibling;
          content.classList.toggle("contentActive");
        });
      }



</script>
