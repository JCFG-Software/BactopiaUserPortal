<!-- Result Page Scripts -->
<script>

    sampleIdentity = "<%- sample_ID %>";

    /*
     * Search through the annotations
     */
    function searchAnnotations(){
        console.log("searching for annotations");
        const query = document.getElementById("searchAnnotations").value.toLowerCase();
        const table = document.getElementById("annotationsTableBody");
        const rows = table.getElementsByTagName("tr");
        console.log(`query: ${query}, number of rows: ${rows.length}`);
        let results = 0;
        for (let i = 0; i < rows.length; i++) {
                const txtValue = rows[i].textContent || rows[i].innerText;
                if (txtValue.toLowerCase().indexOf(query) > -1) {
                    rows[i].style.display = "";
                    results++;
                } else {
                    rows[i].style.display = "none";
                }
            }
        document.getElementById("searchAnnotationsResults").innerHTML = `${results} Results`;

        }


    /*
     * Changes the sample information displayed based on the user selection
     *
     */

    function resultsTabs(evt, tabName) {

        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");


        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }


    function addSamplesToGroup(group_id){
        collection.forEach((ele) => {
            if(ele.isNode() && ele.inside()){
                addSampleToGroup(group_id, ele.id());
            }
        });
        addSampleToGroup(group_id, sampleIdentity);
    }

    function addToGroup(group_id){
        addSampleToGroup(group_id, sampleIdentity);
    }

    function addSampleToGroup(group_id, sample_id){
        //let group_id = document.getElementById('groups-list').value;
        let baseUrl = window.location.origin;
        let url = `${baseUrl}/addGroupSample`;

        if(group_id === 'create'){
            window.location.href = `${baseUrl}/createGroup`;
            return;
        }

        fetch(url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                groupId: group_id,
                sampleId: sample_id,
            })
        })
            .then(response => {
                if (response.status === 200 && sample_id === sampleIdentity) {
                    location.reload(true);
                }
            })
            .catch(error => {
                alert("Something went wrong");
                console.log(error);
            });
    }

    function remGroup(group_id){
        let baseUrl = window.location.origin;//"http://127.0.0.1:8000"; // TODO: update when hosted
        let url = `${baseUrl}/removeGroupSample`;
        fetch(url, {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                groupId: group_id,
                sampleId: "<%- sample_ID %>",
            })
        })
            .then(response => {
                if (response.status == 200) {
                    location.reload(true);
                }
            })
            .catch(error => {
                console.log(error);
            });
    }


// Logic for the slider to select the genetic distance
    function makeSlider(element, type){

        let startX=0, x = 0;
        const width = document.getElementById("slider").offsetWidth;
        let elementLeft = element.offsetLeft;
        let otherLeft = 0;

        element.onmousedown = dragMouseDown;

        // update text on first load
        if(type === "min"){
            element.style.left = 0;
            document.getElementById("minGeneticDist").innerText = 0;
        }else{
            element.style.left = width;
            document.getElementById("maxGeneticDist").innerText = 1;
        }

        function dragMouseDown(e) {
            e = e || window.event;
            e.preventDefault();
            startX = e.clientX;
            elementLeft = element.offsetLeft;
            otherLeft = type === "min" ? document.getElementById("maxGeneticDistThumb").style.left : document.getElementById("minGeneticDistThumb").style.left;
            otherLeft = otherLeft === "" ? 0 : parseInt(otherLeft);
            document.onmouseup = closeDragElement;
            document.onmousemove = elementDrag;
        }

        function elementDrag(e) {
            e = e || window.event;
            e.preventDefault();
            dx = e.clientX - startX;
            let newLeft = elementLeft + dx;
            if(newLeft < 0){
                newLeft = 0;
            }
            if(newLeft > width){
                newLeft = width;
            }
            // prevent going over 'other' slider
            if(type === "min" && newLeft > otherLeft){
                newLeft = otherLeft - 1;
            }
            if(type === "max" && newLeft < otherLeft){
                newLeft = otherLeft + 1;
            }
            element.style.left = newLeft + "px";
            // calculate as percentage
            newValue = newLeft / width;



            // update label with new value (6dp)
            const selectedSlider = document.getElementById("selectedSlider");

            if(type === "min"){
                selectedSlider.style.left = newLeft + "px";
                document.getElementById("minGeneticDist").innerText = newValue.toFixed(4);
            }else{
                selectedSlider.style.right = width - newLeft + "px";
                document.getElementById("maxGeneticDist").innerText = newValue.toFixed(4);
            }
        }

        function closeDragElement() {
            document.onmouseup = null;
            document.onmousemove = null;
            populateFriendsSection();
        }
    }


 function populateFriendsSection() {
     const samples = <%- JSON.stringify(distances) %>;
       let parentSection = document.getElementById("findMyFriendsCards"); // Now create cards
       parentSection.innerHTML = "";
       let count = 0;
       const min_dist = document.getElementById("minGeneticDist").innerText;
       const max_dist = document.getElementById("maxGeneticDist").innerText;

       Object.keys(samples).forEach(function(sample) {
           // skip if out of range
            if(samples[sample] < min_dist-0.0001 || samples[sample] > max_dist+0.0001){
                return;
            }
         genomeCard = createGenomeCard(sample, samples[sample]);
         parentSection.appendChild(genomeCard);

         tag = parentSection.getElementsByClassName("geneticDistanceTag")[count]; // Position the tag
         card = parentSection.getElementsByClassName("genomeCard")[count];
         tag.setAttribute("style", `z-index: 1; top: ${ - 1 * 0.5 * tag.clientHeight }px; left: ${ 0.5 * card.clientWidth }px; width: ${ 0.6 * card.clientWidth }px;`);
         count++;
       });
     }

     function createGenomeCard(sample, distance){
       let newCard = document.createElement("button");
       newCard.setAttribute("class", "genomeCard");
       newCard.setAttribute("name", "sampleSelection");
       newCard.setAttribute("value", `${sample}`);
       newCard.setAttribute("onclick", "window.location.href='/result'");
       newCard.setAttribute("type", "submit");

       let info = document.createElement("p");

       let display = `<div class="genomeCardSampleId"><h4>${sample}</h4></div>
       <div class="geneticDistanceTag">${distance}</div>`;

       info.innerHTML = display;
       newCard.innerHTML = info.outerHTML;

       return newCard;
     }



    // Display cards when first loaded
    window.onload = function() {

      let coll = document.getElementsByClassName("collapsible"); // TODO: CLEANUp

      // Set heights of genome information blocks
      for (i = 0; i < coll.length; i++) {
        let sectionContent = coll[i].nextElementSibling;
        sectionContent.classList.toggle("contentActive");
        let contentHeight = sectionContent.getBoundingClientRect().height;
        sectionContent.style.setProperty('--max-height', contentHeight + 'px');
        sectionContent.classList.toggle("contentActive");
      }

      for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
          this.classList.toggle("sectionActive");
          let content = this.nextElementSibling;
          content.classList.toggle("contentActive");
        });
      }

        const minSlider = document.getElementById("minGeneticDistThumb");
        const maxSlider = document.getElementById("maxGeneticDistThumb");

        makeSlider(minSlider, "min");
        makeSlider(maxSlider, "max");
        populateFriendsSection();

    }




</script>
