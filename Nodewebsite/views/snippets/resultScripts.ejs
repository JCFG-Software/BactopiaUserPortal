<!-- Result Page Scripts -->
<script>

    /*
     * Search through the annotations
     */
    function searchAnnotations(){
        console.log("searching for annotations");
        const query = document.getElementById("searchAnnotations").value.toLowerCase();
        const table = document.getElementById("annotationsTableBody");
        const rows = table.getElementsByTagName("tr");
        console.log(`query: ${query}, number of rows: ${rows.length}`);
        let results = 0;
        for (let i = 0; i < rows.length; i++) {
                const txtValue = rows[i].textContent || rows[i].innerText;
                if (txtValue.toLowerCase().indexOf(query) > -1) {
                    rows[i].style.display = "";
                    results++;
                } else {
                    rows[i].style.display = "none";
                }
            }
        document.getElementById("searchAnnotationsResults").innerHTML = `${results} Results`;

        }


    /*
     * Changes the sample information displayed based on the user selection
     *
     */

    function resultsTabs(evt, tabName) {

        var i, tabcontent, tablinks;
        tabcontent = document.getElementsByClassName("tabcontent");


        for (i = 0; i < tabcontent.length; i++) {
            tabcontent[i].style.display = "none";
        }
        tablinks = document.getElementsByClassName("tablinks");
        for (i = 0; i < tablinks.length; i++) {
            tablinks[i].className = tablinks[i].className.replace(" active", "");
        }
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.className += " active";
    }

    // Display cards when first loaded
    window.onload = function() {

      let coll = document.getElementsByClassName("collapsible"); // TODO: CLEANUp

      // Set heights of genome information blocks
      for (i = 0; i < coll.length; i++) {
        let sectionContent = coll[i].nextElementSibling;
        sectionContent.classList.toggle("contentActive");
        let contentHeight = sectionContent.getBoundingClientRect().height;
        sectionContent.style.setProperty('--max-height', contentHeight + 'px');
        sectionContent.classList.toggle("contentActive");
      }

      for (i = 0; i < coll.length; i++) {
        coll[i].addEventListener("click", function() {
          this.classList.toggle("sectionActive");
          let content = this.nextElementSibling;
          content.classList.toggle("contentActive");
        });
      }
    }


</script>
